//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Riql.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Riql.Transpiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class RiqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, K_ASC=2, K_DESC=3, K_WHERE=4, K_ORDERBY=5, K_REDUCE=6, K_SKIP=7, 
		K_TAKE=8, SINGLE_QUOTE=9, DOUBLE_QUOTE=10, KEYMARKER=11, IDENTIFIER=12, 
		DOT=13, COMMA=14, WHITESPACE=15, ANY=16;
	public const int
		RULE_start = 0, RULE_where = 1, RULE_propertyPath = 2, RULE_property = 3, 
		RULE_orderby = 4, RULE_reduce = 5, RULE_skip = 6, RULE_take = 7, RULE_any = 8, 
		RULE_nonbreakingkeyword = 9, RULE_breakingkeyword = 10;
	public static readonly string[] ruleNames = {
		"start", "where", "propertyPath", "property", "orderby", "reduce", "skip", 
		"take", "any", "nonbreakingkeyword", "breakingkeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, "'$'", 
		null, "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "K_ASC", "K_DESC", "K_WHERE", "K_ORDERBY", "K_REDUCE", "K_SKIP", 
		"K_TAKE", "SINGLE_QUOTE", "DOUBLE_QUOTE", "KEYMARKER", "IDENTIFIER", "DOT", 
		"COMMA", "WHITESPACE", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Riql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RiqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RiqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RiqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RiqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_WHERE() { return GetTokens(RiqlParser.K_WHERE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHERE(int i) {
			return GetToken(RiqlParser.K_WHERE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext[] where() {
			return GetRuleContexts<WhereContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where(int i) {
			return GetRuleContext<WhereContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_ORDERBY() { return GetTokens(RiqlParser.K_ORDERBY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ORDERBY(int i) {
			return GetToken(RiqlParser.K_ORDERBY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderbyContext[] orderby() {
			return GetRuleContexts<OrderbyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderbyContext orderby(int i) {
			return GetRuleContext<OrderbyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_REDUCE() { return GetTokens(RiqlParser.K_REDUCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REDUCE(int i) {
			return GetToken(RiqlParser.K_REDUCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReduceContext[] reduce() {
			return GetRuleContexts<ReduceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReduceContext reduce(int i) {
			return GetRuleContext<ReduceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_SKIP() { return GetTokens(RiqlParser.K_SKIP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SKIP(int i) {
			return GetToken(RiqlParser.K_SKIP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipContext[] skip() {
			return GetRuleContexts<SkipContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipContext skip(int i) {
			return GetRuleContext<SkipContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_TAKE() { return GetTokens(RiqlParser.K_TAKE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TAKE(int i) {
			return GetToken(RiqlParser.K_TAKE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TakeContext[] take() {
			return GetRuleContexts<TakeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TakeContext take(int i) {
			return GetRuleContext<TakeContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_WHERE) | (1L << K_ORDERBY) | (1L << K_REDUCE) | (1L << K_SKIP) | (1L << K_TAKE))) != 0)) {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_WHERE:
					{
					State = 22;
					Match(K_WHERE);
					State = 23;
					where();
					}
					break;
				case K_ORDERBY:
					{
					State = 24;
					Match(K_ORDERBY);
					State = 25;
					orderby();
					}
					break;
				case K_REDUCE:
					{
					State = 26;
					Match(K_REDUCE);
					State = 27;
					reduce();
					}
					break;
				case K_SKIP:
					{
					State = 28;
					Match(K_SKIP);
					State = 29;
					skip();
					}
					break;
				case K_TAKE:
					{
					State = 30;
					Match(K_TAKE);
					State = 31;
					take();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnyContext[] any() {
			return GetRuleContexts<AnyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyContext any(int i) {
			return GetRuleContext<AnyContext>(i);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 2, RULE_where);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			UseFullText(true);
			State = 43;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 40;
					any();
					}
					} 
				}
				State = 45;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			UseFullText(false);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(RiqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(RiqlParser.DOT, i);
		}
		public PropertyPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyPathContext propertyPath() {
		PropertyPathContext _localctx = new PropertyPathContext(Context, State);
		EnterRule(_localctx, 4, RULE_propertyPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 48;
			property();
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 49;
				Match(DOT);
				State = 50;
				property();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RiqlParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonbreakingkeywordContext nonbreakingkeyword() {
			return GetRuleContext<NonbreakingkeywordContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_property);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				Match(IDENTIFIER);
				}
				break;
			case K_ASC:
			case K_DESC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				nonbreakingkeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyPathContext propertyPath() {
			return GetRuleContext<PropertyPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RiqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RiqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderbyContext[] orderby() {
			return GetRuleContexts<OrderbyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderbyContext orderby(int i) {
			return GetRuleContext<OrderbyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ASC() { return GetToken(RiqlParser.K_ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DESC() { return GetToken(RiqlParser.K_DESC, 0); }
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 8, RULE_orderby);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			propertyPath();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 61;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 64;
					Match(COMMA);
					State = 65;
					orderby();
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReduceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RiqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RiqlParser.COMMA, i);
		}
		public ReduceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reduce; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReduce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReduceContext reduce() {
		ReduceContext _localctx = new ReduceContext(Context, State);
		EnterRule(_localctx, 10, RULE_reduce);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			property();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 72;
				Match(COMMA);
				State = 73;
				property();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RiqlParser.INT, 0); }
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 12, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TakeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RiqlParser.INT, 0); }
		public TakeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_take; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTake(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TakeContext take() {
		TakeContext _localctx = new TakeContext(Context, State);
		EnterRule(_localctx, 14, RULE_take);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RiqlParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RiqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ASC() { return GetToken(RiqlParser.K_ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DESC() { return GetToken(RiqlParser.K_DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTE() { return GetToken(RiqlParser.SINGLE_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE() { return GetToken(RiqlParser.DOUBLE_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RiqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RiqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(RiqlParser.WHITESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(RiqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonbreakingkeywordContext nonbreakingkeyword() {
			return GetRuleContext<NonbreakingkeywordContext>(0);
		}
		public AnyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyContext any() {
		AnyContext _localctx = new AnyContext(Context, State);
		EnterRule(_localctx, 16, RULE_any);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				Match(K_ASC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86;
				Match(K_DESC);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 87;
				Match(SINGLE_QUOTE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88;
				Match(DOUBLE_QUOTE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 89;
				Match(DOT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 90;
				Match(COMMA);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 91;
				Match(WHITESPACE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 92;
				Match(ANY);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 93;
				nonbreakingkeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonbreakingkeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ASC() { return GetToken(RiqlParser.K_ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DESC() { return GetToken(RiqlParser.K_DESC, 0); }
		public NonbreakingkeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonbreakingkeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonbreakingkeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonbreakingkeywordContext nonbreakingkeyword() {
		NonbreakingkeywordContext _localctx = new NonbreakingkeywordContext(Context, State);
		EnterRule(_localctx, 18, RULE_nonbreakingkeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = TokenStream.LA(1);
			if ( !(_la==K_ASC || _la==K_DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakingkeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHERE() { return GetToken(RiqlParser.K_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ORDERBY() { return GetToken(RiqlParser.K_ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REDUCE() { return GetToken(RiqlParser.K_REDUCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SKIP() { return GetToken(RiqlParser.K_SKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TAKE() { return GetToken(RiqlParser.K_TAKE, 0); }
		public BreakingkeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakingkeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakingkeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakingkeywordContext breakingkeyword() {
		BreakingkeywordContext _localctx = new BreakingkeywordContext(Context, State);
		EnterRule(_localctx, 20, RULE_breakingkeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_WHERE) | (1L << K_ORDERBY) | (1L << K_REDUCE) | (1L << K_SKIP) | (1L << K_TAKE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,16,101,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		5,0,33,8,0,10,0,12,0,36,9,0,1,0,1,0,1,1,1,1,5,1,42,8,1,10,1,12,1,45,9,
		1,1,1,1,1,1,2,1,2,1,2,5,2,52,8,2,10,2,12,2,55,9,2,1,3,1,3,3,3,59,8,3,1,
		4,1,4,3,4,63,8,4,1,4,1,4,5,4,67,8,4,10,4,12,4,70,9,4,1,5,1,5,1,5,5,5,75,
		8,5,10,5,12,5,78,9,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,3,8,95,8,8,1,9,1,9,1,10,1,10,1,10,1,43,0,11,0,2,4,6,8,10,12,
		14,16,18,20,0,2,1,0,2,3,1,0,4,8,110,0,34,1,0,0,0,2,39,1,0,0,0,4,48,1,0,
		0,0,6,58,1,0,0,0,8,60,1,0,0,0,10,71,1,0,0,0,12,79,1,0,0,0,14,81,1,0,0,
		0,16,94,1,0,0,0,18,96,1,0,0,0,20,98,1,0,0,0,22,23,5,4,0,0,23,33,3,2,1,
		0,24,25,5,5,0,0,25,33,3,8,4,0,26,27,5,6,0,0,27,33,3,10,5,0,28,29,5,7,0,
		0,29,33,3,12,6,0,30,31,5,8,0,0,31,33,3,14,7,0,32,22,1,0,0,0,32,24,1,0,
		0,0,32,26,1,0,0,0,32,28,1,0,0,0,32,30,1,0,0,0,33,36,1,0,0,0,34,32,1,0,
		0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,34,1,0,0,0,37,38,5,0,0,1,38,1,1,0,0,
		0,39,43,6,1,-1,0,40,42,3,16,8,0,41,40,1,0,0,0,42,45,1,0,0,0,43,44,1,0,
		0,0,43,41,1,0,0,0,44,46,1,0,0,0,45,43,1,0,0,0,46,47,6,1,-1,0,47,3,1,0,
		0,0,48,53,3,6,3,0,49,50,5,13,0,0,50,52,3,6,3,0,51,49,1,0,0,0,52,55,1,0,
		0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,5,1,0,0,0,55,53,1,0,0,0,56,59,5,12,
		0,0,57,59,3,18,9,0,58,56,1,0,0,0,58,57,1,0,0,0,59,7,1,0,0,0,60,62,3,4,
		2,0,61,63,7,0,0,0,62,61,1,0,0,0,62,63,1,0,0,0,63,68,1,0,0,0,64,65,5,14,
		0,0,65,67,3,8,4,0,66,64,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,
		0,0,69,9,1,0,0,0,70,68,1,0,0,0,71,76,3,6,3,0,72,73,5,14,0,0,73,75,3,6,
		3,0,74,72,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,11,1,0,
		0,0,78,76,1,0,0,0,79,80,5,1,0,0,80,13,1,0,0,0,81,82,5,1,0,0,82,15,1,0,
		0,0,83,95,5,12,0,0,84,95,5,1,0,0,85,95,5,2,0,0,86,95,5,3,0,0,87,95,5,9,
		0,0,88,95,5,10,0,0,89,95,5,13,0,0,90,95,5,14,0,0,91,95,5,15,0,0,92,95,
		5,16,0,0,93,95,3,18,9,0,94,83,1,0,0,0,94,84,1,0,0,0,94,85,1,0,0,0,94,86,
		1,0,0,0,94,87,1,0,0,0,94,88,1,0,0,0,94,89,1,0,0,0,94,90,1,0,0,0,94,91,
		1,0,0,0,94,92,1,0,0,0,94,93,1,0,0,0,95,17,1,0,0,0,96,97,7,0,0,0,97,19,
		1,0,0,0,98,99,7,1,0,0,99,21,1,0,0,0,9,32,34,43,53,58,62,68,76,94
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Riql.Transpiler
