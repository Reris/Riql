//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Riql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Riql.Transpiler {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RiqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, K_ASC=2, K_DESC=3, K_WHERE=4, K_ORDERBY=5, K_REDUCE=6, K_SKIP=7, 
		K_TAKE=8, SINGLE_QUOTE=9, DOUBLE_QUOTE=10, KEYMARKER=11, IDENTIFIER=12, 
		DOT=13, COMMA=14, WHITESPACE=15, ANY=16;
	public const int
		RULE_start = 0, RULE_where = 1, RULE_propertyPath = 2, RULE_property = 3, 
		RULE_orderby = 4, RULE_reduce = 5, RULE_skip = 6, RULE_take = 7, RULE_any = 8, 
		RULE_nonbreakingkeyword = 9, RULE_breakingkeyword = 10;
	public static readonly string[] ruleNames = {
		"start", "where", "propertyPath", "property", "orderby", "reduce", "skip", 
		"take", "any", "nonbreakingkeyword", "breakingkeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, "'$'", 
		null, "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "K_ASC", "K_DESC", "K_WHERE", "K_ORDERBY", "K_REDUCE", "K_SKIP", 
		"K_TAKE", "SINGLE_QUOTE", "DOUBLE_QUOTE", "KEYMARKER", "IDENTIFIER", "DOT", 
		"COMMA", "WHITESPACE", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Riql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RiqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public RiqlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RiqlParser.Eof, 0); }
		public ITerminalNode[] K_WHERE() { return GetTokens(RiqlParser.K_WHERE); }
		public ITerminalNode K_WHERE(int i) {
			return GetToken(RiqlParser.K_WHERE, i);
		}
		public WhereContext[] where() {
			return GetRuleContexts<WhereContext>();
		}
		public WhereContext where(int i) {
			return GetRuleContext<WhereContext>(i);
		}
		public ITerminalNode[] K_ORDERBY() { return GetTokens(RiqlParser.K_ORDERBY); }
		public ITerminalNode K_ORDERBY(int i) {
			return GetToken(RiqlParser.K_ORDERBY, i);
		}
		public OrderbyContext[] orderby() {
			return GetRuleContexts<OrderbyContext>();
		}
		public OrderbyContext orderby(int i) {
			return GetRuleContext<OrderbyContext>(i);
		}
		public ITerminalNode[] K_REDUCE() { return GetTokens(RiqlParser.K_REDUCE); }
		public ITerminalNode K_REDUCE(int i) {
			return GetToken(RiqlParser.K_REDUCE, i);
		}
		public ReduceContext[] reduce() {
			return GetRuleContexts<ReduceContext>();
		}
		public ReduceContext reduce(int i) {
			return GetRuleContext<ReduceContext>(i);
		}
		public ITerminalNode[] K_SKIP() { return GetTokens(RiqlParser.K_SKIP); }
		public ITerminalNode K_SKIP(int i) {
			return GetToken(RiqlParser.K_SKIP, i);
		}
		public SkipContext[] skip() {
			return GetRuleContexts<SkipContext>();
		}
		public SkipContext skip(int i) {
			return GetRuleContext<SkipContext>(i);
		}
		public ITerminalNode[] K_TAKE() { return GetTokens(RiqlParser.K_TAKE); }
		public ITerminalNode K_TAKE(int i) {
			return GetToken(RiqlParser.K_TAKE, i);
		}
		public TakeContext[] take() {
			return GetRuleContexts<TakeContext>();
		}
		public TakeContext take(int i) {
			return GetRuleContext<TakeContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_WHERE) | (1L << K_ORDERBY) | (1L << K_REDUCE) | (1L << K_SKIP) | (1L << K_TAKE))) != 0)) {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_WHERE:
					{
					State = 22; Match(K_WHERE);
					State = 23; where();
					}
					break;
				case K_ORDERBY:
					{
					State = 24; Match(K_ORDERBY);
					State = 25; orderby();
					}
					break;
				case K_REDUCE:
					{
					State = 26; Match(K_REDUCE);
					State = 27; reduce();
					}
					break;
				case K_SKIP:
					{
					State = 28; Match(K_SKIP);
					State = 29; skip();
					}
					break;
				case K_TAKE:
					{
					State = 30; Match(K_TAKE);
					State = 31; take();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public AnyContext[] any() {
			return GetRuleContexts<AnyContext>();
		}
		public AnyContext any(int i) {
			return GetRuleContext<AnyContext>(i);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 2, RULE_where);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			UseFullText(true);
			State = 43;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 40; any();
					}
					} 
				}
				State = 45;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			UseFullText(false);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyPathContext : ParserRuleContext {
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(RiqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(RiqlParser.DOT, i);
		}
		public PropertyPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyPath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyPathContext propertyPath() {
		PropertyPathContext _localctx = new PropertyPathContext(Context, State);
		EnterRule(_localctx, 4, RULE_propertyPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 48; property();
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 49; Match(DOT);
				State = 50; property();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RiqlParser.IDENTIFIER, 0); }
		public NonbreakingkeywordContext nonbreakingkeyword() {
			return GetRuleContext<NonbreakingkeywordContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_property);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; Match(IDENTIFIER);
				}
				break;
			case K_ASC:
			case K_DESC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; nonbreakingkeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		public PropertyPathContext propertyPath() {
			return GetRuleContext<PropertyPathContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RiqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RiqlParser.COMMA, i);
		}
		public OrderbyContext[] orderby() {
			return GetRuleContexts<OrderbyContext>();
		}
		public OrderbyContext orderby(int i) {
			return GetRuleContext<OrderbyContext>(i);
		}
		public ITerminalNode K_ASC() { return GetToken(RiqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(RiqlParser.K_DESC, 0); }
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 8, RULE_orderby);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; propertyPath();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 61;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 64; Match(COMMA);
					State = 65; orderby();
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReduceContext : ParserRuleContext {
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public ReduceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reduce; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReduce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReduceContext reduce() {
		ReduceContext _localctx = new ReduceContext(Context, State);
		EnterRule(_localctx, 10, RULE_reduce);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; property();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 72; Match(COMMA);
				State = 73; property();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(RiqlParser.INT, 0); }
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 12, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TakeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(RiqlParser.INT, 0); }
		public TakeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_take; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTake(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TakeContext take() {
		TakeContext _localctx = new TakeContext(Context, State);
		EnterRule(_localctx, 14, RULE_take);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RiqlParser.IDENTIFIER, 0); }
		public ITerminalNode INT() { return GetToken(RiqlParser.INT, 0); }
		public ITerminalNode K_ASC() { return GetToken(RiqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(RiqlParser.K_DESC, 0); }
		public ITerminalNode SINGLE_QUOTE() { return GetToken(RiqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode DOUBLE_QUOTE() { return GetToken(RiqlParser.DOUBLE_QUOTE, 0); }
		public ITerminalNode DOT() { return GetToken(RiqlParser.DOT, 0); }
		public ITerminalNode COMMA() { return GetToken(RiqlParser.COMMA, 0); }
		public ITerminalNode WHITESPACE() { return GetToken(RiqlParser.WHITESPACE, 0); }
		public ITerminalNode ANY() { return GetToken(RiqlParser.ANY, 0); }
		public NonbreakingkeywordContext nonbreakingkeyword() {
			return GetRuleContext<NonbreakingkeywordContext>(0);
		}
		public AnyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyContext any() {
		AnyContext _localctx = new AnyContext(Context, State);
		EnterRule(_localctx, 16, RULE_any);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; Match(K_ASC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86; Match(K_DESC);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 87; Match(SINGLE_QUOTE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88; Match(DOUBLE_QUOTE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 89; Match(DOT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 90; Match(COMMA);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 91; Match(WHITESPACE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 92; Match(ANY);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 93; nonbreakingkeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonbreakingkeywordContext : ParserRuleContext {
		public ITerminalNode K_ASC() { return GetToken(RiqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(RiqlParser.K_DESC, 0); }
		public NonbreakingkeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonbreakingkeyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonbreakingkeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonbreakingkeywordContext nonbreakingkeyword() {
		NonbreakingkeywordContext _localctx = new NonbreakingkeywordContext(Context, State);
		EnterRule(_localctx, 18, RULE_nonbreakingkeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = TokenStream.LA(1);
			if ( !(_la==K_ASC || _la==K_DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakingkeywordContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(RiqlParser.K_WHERE, 0); }
		public ITerminalNode K_ORDERBY() { return GetToken(RiqlParser.K_ORDERBY, 0); }
		public ITerminalNode K_REDUCE() { return GetToken(RiqlParser.K_REDUCE, 0); }
		public ITerminalNode K_SKIP() { return GetToken(RiqlParser.K_SKIP, 0); }
		public ITerminalNode K_TAKE() { return GetToken(RiqlParser.K_TAKE, 0); }
		public BreakingkeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakingkeyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRiqlVisitor<TResult> typedVisitor = visitor as IRiqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakingkeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakingkeywordContext breakingkeyword() {
		BreakingkeywordContext _localctx = new BreakingkeywordContext(Context, State);
		EnterRule(_localctx, 20, RULE_breakingkeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_WHERE) | (1L << K_ORDERBY) | (1L << K_REDUCE) | (1L << K_SKIP) | (1L << K_TAKE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x12");
		sb.Append("g\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4");
		sb.Append("\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2#\n");
		sb.Append("\x2\f\x2\xE\x2&\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\a\x3,\n\x3\f\x3");
		sb.Append("\xE\x3/\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4\x36\n\x4\f\x4");
		sb.Append("\xE\x4\x39\v\x4\x3\x5\x3\x5\x5\x5=\n\x5\x3\x6\x3\x6\x5\x6\x41");
		sb.Append("\n\x6\x3\x6\x3\x6\a\x6\x45\n\x6\f\x6\xE\x6H\v\x6\x3\a\x3\a\x3");
		sb.Append("\a\a\aM\n\a\f\a\xE\aP\v\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x61\n\n\x3\v\x3");
		sb.Append("\v\x3\f\x3\f\x3\f\x3-\x2\r\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16");
		sb.Append("\x2\x4\x3\x2\x4\x5\x3\x2\x6\np\x2$\x3\x2\x2\x2\x4)\x3\x2\x2");
		sb.Append("\x2\x6\x32\x3\x2\x2\x2\b<\x3\x2\x2\x2\n>\x3\x2\x2\x2\fI\x3\x2");
		sb.Append("\x2\x2\xEQ\x3\x2\x2\x2\x10S\x3\x2\x2\x2\x12`\x3\x2\x2\x2\x14");
		sb.Append("\x62\x3\x2\x2\x2\x16\x64\x3\x2\x2\x2\x18\x19\a\x6\x2\x2\x19");
		sb.Append("#\x5\x4\x3\x2\x1A\x1B\a\a\x2\x2\x1B#\x5\n\x6\x2\x1C\x1D\a\b");
		sb.Append("\x2\x2\x1D#\x5\f\a\x2\x1E\x1F\a\t\x2\x2\x1F#\x5\xE\b\x2 !\a");
		sb.Append("\n\x2\x2!#\x5\x10\t\x2\"\x18\x3\x2\x2\x2\"\x1A\x3\x2\x2\x2\"");
		sb.Append("\x1C\x3\x2\x2\x2\"\x1E\x3\x2\x2\x2\" \x3\x2\x2\x2#&\x3\x2\x2");
		sb.Append("\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\'\x3\x2\x2\x2&$\x3\x2\x2\x2");
		sb.Append("\'(\a\x2\x2\x3(\x3\x3\x2\x2\x2)-\b\x3\x1\x2*,\x5\x12\n\x2+*");
		sb.Append("\x3\x2\x2\x2,/\x3\x2\x2\x2-.\x3\x2\x2\x2-+\x3\x2\x2\x2.\x30");
		sb.Append("\x3\x2\x2\x2/-\x3\x2\x2\x2\x30\x31\b\x3\x1\x2\x31\x5\x3\x2\x2");
		sb.Append("\x2\x32\x37\x5\b\x5\x2\x33\x34\a\xF\x2\x2\x34\x36\x5\b\x5\x2");
		sb.Append("\x35\x33\x3\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2");
		sb.Append("\x37\x38\x3\x2\x2\x2\x38\a\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2:");
		sb.Append("=\a\xE\x2\x2;=\x5\x14\v\x2<:\x3\x2\x2\x2<;\x3\x2\x2\x2=\t\x3");
		sb.Append("\x2\x2\x2>@\x5\x6\x4\x2?\x41\t\x2\x2\x2@?\x3\x2\x2\x2@\x41\x3");
		sb.Append("\x2\x2\x2\x41\x46\x3\x2\x2\x2\x42\x43\a\x10\x2\x2\x43\x45\x5");
		sb.Append("\n\x6\x2\x44\x42\x3\x2\x2\x2\x45H\x3\x2\x2\x2\x46\x44\x3\x2");
		sb.Append("\x2\x2\x46G\x3\x2\x2\x2G\v\x3\x2\x2\x2H\x46\x3\x2\x2\x2IN\x5");
		sb.Append("\b\x5\x2JK\a\x10\x2\x2KM\x5\b\x5\x2LJ\x3\x2\x2\x2MP\x3\x2\x2");
		sb.Append("\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2O\r\x3\x2\x2\x2PN\x3\x2\x2\x2");
		sb.Append("QR\a\x3\x2\x2R\xF\x3\x2\x2\x2ST\a\x3\x2\x2T\x11\x3\x2\x2\x2");
		sb.Append("U\x61\a\xE\x2\x2V\x61\a\x3\x2\x2W\x61\a\x4\x2\x2X\x61\a\x5\x2");
		sb.Append("\x2Y\x61\a\v\x2\x2Z\x61\a\f\x2\x2[\x61\a\xF\x2\x2\\\x61\a\x10");
		sb.Append("\x2\x2]\x61\a\x11\x2\x2^\x61\a\x12\x2\x2_\x61\x5\x14\v\x2`U");
		sb.Append("\x3\x2\x2\x2`V\x3\x2\x2\x2`W\x3\x2\x2\x2`X\x3\x2\x2\x2`Y\x3");
		sb.Append("\x2\x2\x2`Z\x3\x2\x2\x2`[\x3\x2\x2\x2`\\\x3\x2\x2\x2`]\x3\x2");
		sb.Append("\x2\x2`^\x3\x2\x2\x2`_\x3\x2\x2\x2\x61\x13\x3\x2\x2\x2\x62\x63");
		sb.Append("\t\x2\x2\x2\x63\x15\x3\x2\x2\x2\x64\x65\t\x3\x2\x2\x65\x17\x3");
		sb.Append("\x2\x2\x2\v\"$-\x37<@\x46N`");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace Riql.Transpiler
