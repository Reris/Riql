//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Riql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Riql.Transpiler {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RiqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, K_ASC=2, K_DESC=3, K_WHERE=4, K_ORDERBY=5, K_REDUCE=6, K_SKIP=7, 
		K_TAKE=8, SINGLE_QUOTE=9, DOUBLE_QUOTE=10, KEYMARKER=11, IDENTIFIER=12, 
		DOT=13, COMMA=14, WHITESPACE=15, ANY=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", 
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "DIGIT", "INT", 
		"K_ASC", "K_DESC", "K_WHERE", "K_ORDERBY", "K_REDUCE", "K_SKIP", "K_TAKE", 
		"SINGLE_QUOTE", "DOUBLE_QUOTE", "KEYMARKER", "IDENTIFIER", "DOT", "COMMA", 
		"WHITESPACE", "ANY"
	};


	public RiqlLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, "'$'", 
		null, "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "K_ASC", "K_DESC", "K_WHERE", "K_ORDERBY", "K_REDUCE", "K_SKIP", 
		"K_TAKE", "SINGLE_QUOTE", "DOUBLE_QUOTE", "KEYMARKER", "IDENTIFIER", "DOT", 
		"COMMA", "WHITESPACE", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Riql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RiqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 41 : WHITESPACE_action(_localctx, actionIndex); break;
		}
	}
	private void WHITESPACE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  if (!UseFullText) Skip();  break;
		}
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x12");
		sb.Append("\x100\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
		sb.Append("\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4");
		sb.Append(" \t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4");
		sb.Append("(\t(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x3\x2\x3\x2\x3\x3\x3\x3\x3");
		sb.Append("\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3");
		sb.Append("\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF");
		sb.Append("\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13");
		sb.Append("\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3");
		sb.Append("\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C");
		sb.Append("\x3\x1C\x3\x1D\x5\x1D\x91\n\x1D\x3\x1D\x6\x1D\x94\n\x1D\r\x1D");
		sb.Append("\xE\x1D\x95\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \xA8\n \x3 \x3");
		sb.Append(" \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\xB5\n!\x3!\x3!\x3");
		sb.Append("\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\xC1\n\"\x3\"\x3\"");
		sb.Append("\x3#\x3#\x3#\x3#\x3#\x3#\x5#\xCB\n#\x3#\x3#\x3$\x3$\x3$\x3$");
		sb.Append("\x3$\x3$\x5$\xD5\n$\x3$\x3$\x3%\x3%\x3%\x3%\a%\xDD\n%\f%\xE");
		sb.Append("%\xE0\v%\x3%\x3%\x3&\x3&\x3&\x3&\a&\xE8\n&\f&\xE&\xEB\v&\x3");
		sb.Append("&\x3&\x3\'\x3\'\x3(\x3(\a(\xF3\n(\f(\xE(\xF6\v(\x3)\x3)\x3*");
		sb.Append("\x3*\x3+\x3+\x3+\x3,\x3,\x2\x2-\x3\x2\x5\x2\a\x2\t\x2\v\x2\r");
		sb.Append("\x2\xF\x2\x11\x2\x13\x2\x15\x2\x17\x2\x19\x2\x1B\x2\x1D\x2\x1F");
		sb.Append("\x2!\x2#\x2%\x2\'\x2)\x2+\x2-\x2/\x2\x31\x2\x33\x2\x35\x2\x37");
		sb.Append("\x2\x39\x3;\x4=\x5?\x6\x41\a\x43\b\x45\tG\nI\vK\fM\rO\xEQ\xF");
		sb.Append("S\x10U\x11W\x12\x3\x2\"\x4\x2\x43\x43\x63\x63\x4\x2\x44\x44");
		sb.Append("\x64\x64\x4\x2\x45\x45\x65\x65\x4\x2\x46\x46\x66\x66\x4\x2G");
		sb.Append("Ggg\x4\x2HHhh\x4\x2IIii\x4\x2JJjj\x4\x2KKkk\x4\x2LLll\x4\x2");
		sb.Append("MMmm\x4\x2NNnn\x4\x2OOoo\x4\x2PPpp\x4\x2QQqq\x4\x2RRrr\x4\x2");
		sb.Append("SSss\x4\x2TTtt\x4\x2UUuu\x4\x2VVvv\x4\x2WWww\x4\x2XXxx\x4\x2");
		sb.Append("YYyy\x4\x2ZZzz\x4\x2[[{{\x4\x2\\\\||\x3\x2\x32;\x3\x2))\x3\x2");
		sb.Append("$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5");
		sb.Append("\x2\v\v\"\"))\xF0\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3");
		sb.Append("\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2");
		sb.Append("\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3");
		sb.Append("\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2");
		sb.Append("S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x3Y\x3\x2\x2\x2");
		sb.Append("\x5[\x3\x2\x2\x2\a]\x3\x2\x2\x2\t_\x3\x2\x2\x2\v\x61\x3\x2\x2");
		sb.Append("\x2\r\x63\x3\x2\x2\x2\xF\x65\x3\x2\x2\x2\x11g\x3\x2\x2\x2\x13");
		sb.Append("i\x3\x2\x2\x2\x15k\x3\x2\x2\x2\x17m\x3\x2\x2\x2\x19o\x3\x2\x2");
		sb.Append("\x2\x1Bq\x3\x2\x2\x2\x1Ds\x3\x2\x2\x2\x1Fu\x3\x2\x2\x2!w\x3");
		sb.Append("\x2\x2\x2#y\x3\x2\x2\x2%{\x3\x2\x2\x2\'}\x3\x2\x2\x2)\x7F\x3");
		sb.Append("\x2\x2\x2+\x81\x3\x2\x2\x2-\x83\x3\x2\x2\x2/\x85\x3\x2\x2\x2");
		sb.Append("\x31\x87\x3\x2\x2\x2\x33\x89\x3\x2\x2\x2\x35\x8B\x3\x2\x2\x2");
		sb.Append("\x37\x8D\x3\x2\x2\x2\x39\x90\x3\x2\x2\x2;\x97\x3\x2\x2\x2=\x9B");
		sb.Append("\x3\x2\x2\x2?\xA0\x3\x2\x2\x2\x41\xAB\x3\x2\x2\x2\x43\xB8\x3");
		sb.Append("\x2\x2\x2\x45\xC4\x3\x2\x2\x2G\xCE\x3\x2\x2\x2I\xD8\x3\x2\x2");
		sb.Append("\x2K\xE3\x3\x2\x2\x2M\xEE\x3\x2\x2\x2O\xF0\x3\x2\x2\x2Q\xF7");
		sb.Append("\x3\x2\x2\x2S\xF9\x3\x2\x2\x2U\xFB\x3\x2\x2\x2W\xFE\x3\x2\x2");
		sb.Append("\x2YZ\t\x2\x2\x2Z\x4\x3\x2\x2\x2[\\\t\x3\x2\x2\\\x6\x3\x2\x2");
		sb.Append("\x2]^\t\x4\x2\x2^\b\x3\x2\x2\x2_`\t\x5\x2\x2`\n\x3\x2\x2\x2");
		sb.Append("\x61\x62\t\x6\x2\x2\x62\f\x3\x2\x2\x2\x63\x64\t\a\x2\x2\x64");
		sb.Append("\xE\x3\x2\x2\x2\x65\x66\t\b\x2\x2\x66\x10\x3\x2\x2\x2gh\t\t");
		sb.Append("\x2\x2h\x12\x3\x2\x2\x2ij\t\n\x2\x2j\x14\x3\x2\x2\x2kl\t\v\x2");
		sb.Append("\x2l\x16\x3\x2\x2\x2mn\t\f\x2\x2n\x18\x3\x2\x2\x2op\t\r\x2\x2");
		sb.Append("p\x1A\x3\x2\x2\x2qr\t\xE\x2\x2r\x1C\x3\x2\x2\x2st\t\xF\x2\x2");
		sb.Append("t\x1E\x3\x2\x2\x2uv\t\x10\x2\x2v \x3\x2\x2\x2wx\t\x11\x2\x2");
		sb.Append("x\"\x3\x2\x2\x2yz\t\x12\x2\x2z$\x3\x2\x2\x2{|\t\x13\x2\x2|&");
		sb.Append("\x3\x2\x2\x2}~\t\x14\x2\x2~(\x3\x2\x2\x2\x7F\x80\t\x15\x2\x2");
		sb.Append("\x80*\x3\x2\x2\x2\x81\x82\t\x16\x2\x2\x82,\x3\x2\x2\x2\x83\x84");
		sb.Append("\t\x17\x2\x2\x84.\x3\x2\x2\x2\x85\x86\t\x18\x2\x2\x86\x30\x3");
		sb.Append("\x2\x2\x2\x87\x88\t\x19\x2\x2\x88\x32\x3\x2\x2\x2\x89\x8A\t");
		sb.Append("\x1A\x2\x2\x8A\x34\x3\x2\x2\x2\x8B\x8C\t\x1B\x2\x2\x8C\x36\x3");
		sb.Append("\x2\x2\x2\x8D\x8E\t\x1C\x2\x2\x8E\x38\x3\x2\x2\x2\x8F\x91\a");
		sb.Append("/\x2\x2\x90\x8F\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x93\x3\x2");
		sb.Append("\x2\x2\x92\x94\x5\x37\x1C\x2\x93\x92\x3\x2\x2\x2\x94\x95\x3");
		sb.Append("\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96:\x3\x2");
		sb.Append("\x2\x2\x97\x98\x5\x3\x2\x2\x98\x99\x5\'\x14\x2\x99\x9A\x5\a");
		sb.Append("\x4\x2\x9A<\x3\x2\x2\x2\x9B\x9C\x5\t\x5\x2\x9C\x9D\x5\v\x6\x2");
		sb.Append("\x9D\x9E\x5\'\x14\x2\x9E\x9F\x5\a\x4\x2\x9F>\x3\x2\x2\x2\xA0");
		sb.Append("\xA1\x5M\'\x2\xA1\xA7\x5/\x18\x2\xA2\xA3\x5\x11\t\x2\xA3\xA4");
		sb.Append("\x5\v\x6\x2\xA4\xA5\x5%\x13\x2\xA5\xA6\x5\v\x6\x2\xA6\xA8\x3");
		sb.Append("\x2\x2\x2\xA7\xA2\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x3");
		sb.Append("\x2\x2\x2\xA9\xAA\a?\x2\x2\xAA@\x3\x2\x2\x2\xAB\xAC\x5M\'\x2");
		sb.Append("\xAC\xB4\x5\x1F\x10\x2\xAD\xAE\x5%\x13\x2\xAE\xAF\x5\t\x5\x2");
		sb.Append("\xAF\xB0\x5\v\x6\x2\xB0\xB1\x5%\x13\x2\xB1\xB2\x5\x5\x3\x2\xB2");
		sb.Append("\xB3\x5\x33\x1A\x2\xB3\xB5\x3\x2\x2\x2\xB4\xAD\x3\x2\x2\x2\xB4");
		sb.Append("\xB5\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB7\a?\x2\x2\xB7\x42");
		sb.Append("\x3\x2\x2\x2\xB8\xB9\x5M\'\x2\xB9\xC0\x5%\x13\x2\xBA\xBB\x5");
		sb.Append("\v\x6\x2\xBB\xBC\x5\t\x5\x2\xBC\xBD\x5+\x16\x2\xBD\xBE\x5\a");
		sb.Append("\x4\x2\xBE\xBF\x5\v\x6\x2\xBF\xC1\x3\x2\x2\x2\xC0\xBA\x3\x2");
		sb.Append("\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\a?\x2");
		sb.Append("\x2\xC3\x44\x3\x2\x2\x2\xC4\xC5\x5M\'\x2\xC5\xCA\x5\'\x14\x2");
		sb.Append("\xC6\xC7\x5\x17\f\x2\xC7\xC8\x5\x13\n\x2\xC8\xC9\x5!\x11\x2");
		sb.Append("\xC9\xCB\x3\x2\x2\x2\xCA\xC6\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2");
		sb.Append("\xCB\xCC\x3\x2\x2\x2\xCC\xCD\a?\x2\x2\xCD\x46\x3\x2\x2\x2\xCE");
		sb.Append("\xCF\x5M\'\x2\xCF\xD4\x5)\x15\x2\xD0\xD1\x5\x3\x2\x2\xD1\xD2");
		sb.Append("\x5\x17\f\x2\xD2\xD3\x5\v\x6\x2\xD3\xD5\x3\x2\x2\x2\xD4\xD0");
		sb.Append("\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD7");
		sb.Append("\a?\x2\x2\xD7H\x3\x2\x2\x2\xD8\xDE\a)\x2\x2\xD9\xDA\a^\x2\x2");
		sb.Append("\xDA\xDD\a)\x2\x2\xDB\xDD\n\x1D\x2\x2\xDC\xD9\x3\x2\x2\x2\xDC");
		sb.Append("\xDB\x3\x2\x2\x2\xDD\xE0\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE");
		sb.Append("\xDF\x3\x2\x2\x2\xDF\xE1\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE1");
		sb.Append("\xE2\a)\x2\x2\xE2J\x3\x2\x2\x2\xE3\xE9\a$\x2\x2\xE4\xE5\a^\x2");
		sb.Append("\x2\xE5\xE8\a$\x2\x2\xE6\xE8\n\x1E\x2\x2\xE7\xE4\x3\x2\x2\x2");
		sb.Append("\xE7\xE6\x3\x2\x2\x2\xE8\xEB\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2");
		sb.Append("\xE9\xEA\x3\x2\x2\x2\xEA\xEC\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2");
		sb.Append("\xEC\xED\a$\x2\x2\xEDL\x3\x2\x2\x2\xEE\xEF\a&\x2\x2\xEFN\x3");
		sb.Append("\x2\x2\x2\xF0\xF4\t\x1F\x2\x2\xF1\xF3\t \x2\x2\xF2\xF1\x3\x2");
		sb.Append("\x2\x2\xF3\xF6\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2");
		sb.Append("\x2\x2\xF5P\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\xF8\a\x30\x2");
		sb.Append("\x2\xF8R\x3\x2\x2\x2\xF9\xFA\a.\x2\x2\xFAT\x3\x2\x2\x2\xFB\xFC");
		sb.Append("\t!\x2\x2\xFC\xFD\b+\x2\x2\xFDV\x3\x2\x2\x2\xFE\xFF\v\x2\x2");
		sb.Append("\x2\xFFX\x3\x2\x2\x2\xF\x2\x90\x95\xA7\xB4\xC0\xCA\xD4\xDC\xDE");
		sb.Append("\xE7\xE9\xF4\x3\x3+\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace Riql.Transpiler
