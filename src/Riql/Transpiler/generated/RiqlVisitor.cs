//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Riql.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Riql.Transpiler {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="RiqlParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public interface IRiqlVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStart([NotNull] RiqlParser.StartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.where"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhere([NotNull] RiqlParser.WhereContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.propertyPath"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPropertyPath([NotNull] RiqlParser.PropertyPathContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.property"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProperty([NotNull] RiqlParser.PropertyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.orderby"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrderby([NotNull] RiqlParser.OrderbyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.reduce"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReduce([NotNull] RiqlParser.ReduceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.skip"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSkip([NotNull] RiqlParser.SkipContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.take"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTake([NotNull] RiqlParser.TakeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.any"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAny([NotNull] RiqlParser.AnyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.nonbreakingkeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNonbreakingkeyword([NotNull] RiqlParser.NonbreakingkeywordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RiqlParser.breakingkeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakingkeyword([NotNull] RiqlParser.BreakingkeywordContext context);
}
} // namespace Riql.Transpiler
