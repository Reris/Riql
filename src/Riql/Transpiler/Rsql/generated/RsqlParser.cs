//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Rsql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Riql.Transpiler.Rsql {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RsqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, SINGLE_QUOTE=24, 
		DOUBLE_QUOTE=25, WHITESPACE=26, GROUP_START=27, GROUP_END=28, ANY=29;
	public const int
		RULE_selector = 0, RULE_start = 1, RULE_or = 2, RULE_and = 3, RULE_constraint = 4, 
		RULE_group = 5, RULE_comparison = 6, RULE_comparator = 7, RULE_arguments = 8, 
		RULE_value = 9;
	public static readonly string[] ruleNames = {
		"selector", "start", "or", "and", "constraint", "group", "comparison", 
		"comparator", "arguments", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'='", "'<'", "'>'", "'!'", "'''", "'\"'", "'=='", 
		"'=eq='", "'!=\"'", "'=neq='", "'=lt='", "'<='", "'=le='", "'=gt='", "'>='", 
		"'=ge='", "'=is-null='", "'=nil='", "'=in='", "'=out='", "'=nin='", null, 
		null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"SINGLE_QUOTE", "DOUBLE_QUOTE", "WHITESPACE", "GROUP_START", "GROUP_END", 
		"ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rsql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RsqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public RsqlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SelectorContext : ParserRuleContext {
		public ITerminalNode[] GROUP_START() { return GetTokens(RsqlParser.GROUP_START); }
		public ITerminalNode GROUP_START(int i) {
			return GetToken(RsqlParser.GROUP_START, i);
		}
		public ITerminalNode[] GROUP_END() { return GetTokens(RsqlParser.GROUP_END); }
		public ITerminalNode GROUP_END(int i) {
			return GetToken(RsqlParser.GROUP_END, i);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 0, RULE_selector);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 20;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << GROUP_START) | (1L << GROUP_END))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 23;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public OrContext or() {
			return GetRuleContext<OrContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(RsqlParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 2, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; or();
			State = 26; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrContext : ParserRuleContext {
		public AndContext[] and() {
			return GetRuleContexts<AndContext>();
		}
		public AndContext and(int i) {
			return GetRuleContext<AndContext>(i);
		}
		public OrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrContext or() {
		OrContext _localctx = new OrContext(Context, State);
		EnterRule(_localctx, 4, RULE_or);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; and();
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 29; Match(T__1);
				State = 30; and();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndContext : ParserRuleContext {
		public ConstraintContext[] constraint() {
			return GetRuleContexts<ConstraintContext>();
		}
		public ConstraintContext constraint(int i) {
			return GetRuleContext<ConstraintContext>(i);
		}
		public AndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndContext and() {
		AndContext _localctx = new AndContext(Context, State);
		EnterRule(_localctx, 6, RULE_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; constraint();
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 37; Match(T__0);
				State = 38; constraint();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 8, RULE_constraint);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; group();
				}
				break;
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case SINGLE_QUOTE:
			case DOUBLE_QUOTE:
			case WHITESPACE:
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45; comparison();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public ITerminalNode GROUP_START() { return GetToken(RsqlParser.GROUP_START, 0); }
		public OrContext or() {
			return GetRuleContext<OrContext>(0);
		}
		public ITerminalNode GROUP_END() { return GetToken(RsqlParser.GROUP_END, 0); }
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 10, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(GROUP_START);
			State = 49; or();
			State = 50; Match(GROUP_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 12, RULE_comparison);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; selector();
			State = 53; comparator();
			State = 54; arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode GROUP_START() { return GetToken(RsqlParser.GROUP_START, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode GROUP_END() { return GetToken(RsqlParser.GROUP_END, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 16, RULE_arguments);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP_START:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 58; Match(GROUP_START);
				State = 59; value();
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 60; Match(T__1);
					State = 61; value();
					}
					}
					State = 66;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 67; Match(GROUP_END);
				}
				}
				break;
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case SINGLE_QUOTE:
			case DOUBLE_QUOTE:
			case WHITESPACE:
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode[] GROUP_START() { return GetTokens(RsqlParser.GROUP_START); }
		public ITerminalNode GROUP_START(int i) {
			return GetToken(RsqlParser.GROUP_START, i);
		}
		public ITerminalNode[] GROUP_END() { return GetTokens(RsqlParser.GROUP_END); }
		public ITerminalNode GROUP_END(int i) {
			return GetToken(RsqlParser.GROUP_END, i);
		}
		public ITerminalNode SINGLE_QUOTE() { return GetToken(RsqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode DOUBLE_QUOTE() { return GetToken(RsqlParser.DOUBLE_QUOTE, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_value);
		int _la;
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 72;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << GROUP_START) | (1L << GROUP_END))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << SINGLE_QUOTE) | (1L << DOUBLE_QUOTE) | (1L << WHITESPACE) | (1L << ANY))) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; Match(SINGLE_QUOTE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 78; Match(DOUBLE_QUOTE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1F");
		sb.Append("T\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4");
		sb.Append("\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x3\x2\x6\x2\x18\n");
		sb.Append("\x2\r\x2\xE\x2\x19\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4");
		sb.Append("\"\n\x4\f\x4\xE\x4%\v\x4\x3\x5\x3\x5\x3\x5\a\x5*\n\x5\f\x5\xE");
		sb.Append("\x5-\v\x5\x3\x6\x3\x6\x5\x6\x31\n\x6\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\a\n\x41\n\n");
		sb.Append("\f\n\xE\n\x44\v\n\x3\n\x3\n\x3\n\x5\nI\n\n\x3\v\x6\vL\n\v\r");
		sb.Append("\v\xE\vM\x3\v\x3\v\x5\vR\n\v\x3\v\x2\x2\f\x2\x4\x6\b\n\f\xE");
		sb.Append("\x10\x12\x14\x2\x4\x4\x2\x3\n\x1D\x1E\x4\x2\x6\a\v\x19R\x2\x17");
		sb.Append("\x3\x2\x2\x2\x4\x1B\x3\x2\x2\x2\x6\x1E\x3\x2\x2\x2\b&\x3\x2");
		sb.Append("\x2\x2\n\x30\x3\x2\x2\x2\f\x32\x3\x2\x2\x2\xE\x36\x3\x2\x2\x2");
		sb.Append("\x10:\x3\x2\x2\x2\x12H\x3\x2\x2\x2\x14Q\x3\x2\x2\x2\x16\x18");
		sb.Append("\n\x2\x2\x2\x17\x16\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x17");
		sb.Append("\x3\x2\x2\x2\x19\x1A\x3\x2\x2\x2\x1A\x3\x3\x2\x2\x2\x1B\x1C");
		sb.Append("\x5\x6\x4\x2\x1C\x1D\a\x2\x2\x3\x1D\x5\x3\x2\x2\x2\x1E#\x5\b");
		sb.Append("\x5\x2\x1F \a\x4\x2\x2 \"\x5\b\x5\x2!\x1F\x3\x2\x2\x2\"%\x3");
		sb.Append("\x2\x2\x2#!\x3\x2\x2\x2#$\x3\x2\x2\x2$\a\x3\x2\x2\x2%#\x3\x2");
		sb.Append("\x2\x2&+\x5\n\x6\x2\'(\a\x3\x2\x2(*\x5\n\x6\x2)\'\x3\x2\x2\x2");
		sb.Append("*-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,\t\x3\x2\x2\x2-+");
		sb.Append("\x3\x2\x2\x2.\x31\x5\f\a\x2/\x31\x5\xE\b\x2\x30.\x3\x2\x2\x2");
		sb.Append("\x30/\x3\x2\x2\x2\x31\v\x3\x2\x2\x2\x32\x33\a\x1D\x2\x2\x33");
		sb.Append("\x34\x5\x6\x4\x2\x34\x35\a\x1E\x2\x2\x35\r\x3\x2\x2\x2\x36\x37");
		sb.Append("\x5\x2\x2\x2\x37\x38\x5\x10\t\x2\x38\x39\x5\x12\n\x2\x39\xF");
		sb.Append("\x3\x2\x2\x2:;\t\x3\x2\x2;\x11\x3\x2\x2\x2<=\a\x1D\x2\x2=\x42");
		sb.Append("\x5\x14\v\x2>?\a\x4\x2\x2?\x41\x5\x14\v\x2@>\x3\x2\x2\x2\x41");
		sb.Append("\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x45");
		sb.Append("\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45\x46\a\x1E\x2\x2\x46I\x3");
		sb.Append("\x2\x2\x2GI\x5\x14\v\x2H<\x3\x2\x2\x2HG\x3\x2\x2\x2I\x13\x3");
		sb.Append("\x2\x2\x2JL\n\x2\x2\x2KJ\x3\x2\x2\x2LM\x3\x2\x2\x2MK\x3\x2\x2");
		sb.Append("\x2MN\x3\x2\x2\x2NR\x3\x2\x2\x2OR\a\x1A\x2\x2PR\a\x1B\x2\x2");
		sb.Append("QK\x3\x2\x2\x2QO\x3\x2\x2\x2QP\x3\x2\x2\x2R\x15\x3\x2\x2\x2");
		sb.Append("\n\x19#+\x30\x42HMQ");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace Riql.Transpiler.Rsql
