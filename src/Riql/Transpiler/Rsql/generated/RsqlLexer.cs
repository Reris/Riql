//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Rsql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Riql.Transpiler.Rsql {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RsqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, SINGLE_QUOTE=24, 
		DOUBLE_QUOTE=25, WHITESPACE=26, GROUP_START=27, GROUP_END=28, ANY=29;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "SINGLE_QUOTE", 
		"DOUBLE_QUOTE", "WHITESPACE", "GROUP_START", "GROUP_END", "ANY"
	};


	public RsqlLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'='", "'<'", "'>'", "'!'", "'''", "'\"'", "'=='", 
		"'=eq='", "'!=\"'", "'=neq='", "'=lt='", "'<='", "'=le='", "'=gt='", "'>='", 
		"'=ge='", "'=is-null='", "'=nil='", "'=in='", "'=out='", "'=nin='", null, 
		null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"SINGLE_QUOTE", "DOUBLE_QUOTE", "WHITESPACE", "GROUP_START", "GROUP_END", 
		"ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rsql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RsqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x1F");
		sb.Append("\xBA\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
		sb.Append("\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\x3\x2\x3");
		sb.Append("\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b");
		sb.Append("\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3");
		sb.Append("\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3");
		sb.Append("\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14");
		sb.Append("\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3");
		sb.Append("\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16");
		sb.Append("\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3");
		sb.Append("\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19");
		sb.Append("\a\x19\x9F\n\x19\f\x19\xE\x19\xA2\v\x19\x3\x19\x3\x19\x3\x1A");
		sb.Append("\x3\x1A\x3\x1A\x3\x1A\a\x1A\xAA\n\x1A\f\x1A\xE\x1A\xAD\v\x1A");
		sb.Append("\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3");
		sb.Append("\x1D\x3\x1D\x3\x1E\x3\x1E\x2\x2\x1F\x3\x3\x5\x4\a\x5\t\x6\v");
		sb.Append("\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F");
		sb.Append("\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B");
		sb.Append("\x35\x1C\x37\x1D\x39\x1E;\x1F\x3\x2\x5\x3\x2))\x3\x2$$\x4\x2");
		sb.Append("\v\v\"\"\xBD\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2");
		sb.Append("\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2");
		sb.Append("\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15");
		sb.Append("\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3");
		sb.Append("\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2");
		sb.Append("\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3");
		sb.Append("\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2");
		sb.Append("\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37");
		sb.Append("\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x3=\x3\x2\x2");
		sb.Append("\x2\x5?\x3\x2\x2\x2\a\x41\x3\x2\x2\x2\t\x43\x3\x2\x2\x2\v\x45");
		sb.Append("\x3\x2\x2\x2\rG\x3\x2\x2\x2\xFI\x3\x2\x2\x2\x11K\x3\x2\x2\x2");
		sb.Append("\x13M\x3\x2\x2\x2\x15P\x3\x2\x2\x2\x17U\x3\x2\x2\x2\x19Y\x3");
		sb.Append("\x2\x2\x2\x1B_\x3\x2\x2\x2\x1D\x64\x3\x2\x2\x2\x1Fg\x3\x2\x2");
		sb.Append("\x2!l\x3\x2\x2\x2#q\x3\x2\x2\x2%t\x3\x2\x2\x2\'y\x3\x2\x2\x2");
		sb.Append(")\x83\x3\x2\x2\x2+\x89\x3\x2\x2\x2-\x8E\x3\x2\x2\x2/\x94\x3");
		sb.Append("\x2\x2\x2\x31\x9A\x3\x2\x2\x2\x33\xA5\x3\x2\x2\x2\x35\xB0\x3");
		sb.Append("\x2\x2\x2\x37\xB4\x3\x2\x2\x2\x39\xB6\x3\x2\x2\x2;\xB8\x3\x2");
		sb.Append("\x2\x2=>\a=\x2\x2>\x4\x3\x2\x2\x2?@\a.\x2\x2@\x6\x3\x2\x2\x2");
		sb.Append("\x41\x42\a?\x2\x2\x42\b\x3\x2\x2\x2\x43\x44\a>\x2\x2\x44\n\x3");
		sb.Append("\x2\x2\x2\x45\x46\a@\x2\x2\x46\f\x3\x2\x2\x2GH\a#\x2\x2H\xE");
		sb.Append("\x3\x2\x2\x2IJ\a)\x2\x2J\x10\x3\x2\x2\x2KL\a$\x2\x2L\x12\x3");
		sb.Append("\x2\x2\x2MN\a?\x2\x2NO\a?\x2\x2O\x14\x3\x2\x2\x2PQ\a?\x2\x2");
		sb.Append("QR\ag\x2\x2RS\as\x2\x2ST\a?\x2\x2T\x16\x3\x2\x2\x2UV\a#\x2\x2");
		sb.Append("VW\a?\x2\x2WX\a$\x2\x2X\x18\x3\x2\x2\x2YZ\a?\x2\x2Z[\ap\x2\x2");
		sb.Append("[\\\ag\x2\x2\\]\as\x2\x2]^\a?\x2\x2^\x1A\x3\x2\x2\x2_`\a?\x2");
		sb.Append("\x2`\x61\an\x2\x2\x61\x62\av\x2\x2\x62\x63\a?\x2\x2\x63\x1C");
		sb.Append("\x3\x2\x2\x2\x64\x65\a>\x2\x2\x65\x66\a?\x2\x2\x66\x1E\x3\x2");
		sb.Append("\x2\x2gh\a?\x2\x2hi\an\x2\x2ij\ag\x2\x2jk\a?\x2\x2k \x3\x2\x2");
		sb.Append("\x2lm\a?\x2\x2mn\ai\x2\x2no\av\x2\x2op\a?\x2\x2p\"\x3\x2\x2");
		sb.Append("\x2qr\a@\x2\x2rs\a?\x2\x2s$\x3\x2\x2\x2tu\a?\x2\x2uv\ai\x2\x2");
		sb.Append("vw\ag\x2\x2wx\a?\x2\x2x&\x3\x2\x2\x2yz\a?\x2\x2z{\ak\x2\x2{");
		sb.Append("|\au\x2\x2|}\a/\x2\x2}~\ap\x2\x2~\x7F\aw\x2\x2\x7F\x80\an\x2");
		sb.Append("\x2\x80\x81\an\x2\x2\x81\x82\a?\x2\x2\x82(\x3\x2\x2\x2\x83\x84");
		sb.Append("\a?\x2\x2\x84\x85\ap\x2\x2\x85\x86\ak\x2\x2\x86\x87\an\x2\x2");
		sb.Append("\x87\x88\a?\x2\x2\x88*\x3\x2\x2\x2\x89\x8A\a?\x2\x2\x8A\x8B");
		sb.Append("\ak\x2\x2\x8B\x8C\ap\x2\x2\x8C\x8D\a?\x2\x2\x8D,\x3\x2\x2\x2");
		sb.Append("\x8E\x8F\a?\x2\x2\x8F\x90\aq\x2\x2\x90\x91\aw\x2\x2\x91\x92");
		sb.Append("\av\x2\x2\x92\x93\a?\x2\x2\x93.\x3\x2\x2\x2\x94\x95\a?\x2\x2");
		sb.Append("\x95\x96\ap\x2\x2\x96\x97\ak\x2\x2\x97\x98\ap\x2\x2\x98\x99");
		sb.Append("\a?\x2\x2\x99\x30\x3\x2\x2\x2\x9A\xA0\a)\x2\x2\x9B\x9C\a^\x2");
		sb.Append("\x2\x9C\x9F\a)\x2\x2\x9D\x9F\n\x2\x2\x2\x9E\x9B\x3\x2\x2\x2");
		sb.Append("\x9E\x9D\x3\x2\x2\x2\x9F\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2");
		sb.Append("\xA0\xA1\x3\x2\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2");
		sb.Append("\xA3\xA4\a)\x2\x2\xA4\x32\x3\x2\x2\x2\xA5\xAB\a$\x2\x2\xA6\xA7");
		sb.Append("\a^\x2\x2\xA7\xAA\a$\x2\x2\xA8\xAA\n\x3\x2\x2\xA9\xA6\x3\x2");
		sb.Append("\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA\xAD\x3\x2\x2\x2\xAB\xA9\x3\x2");
		sb.Append("\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAE\x3\x2\x2\x2\xAD\xAB\x3\x2");
		sb.Append("\x2\x2\xAE\xAF\a$\x2\x2\xAF\x34\x3\x2\x2\x2\xB0\xB1\t\x4\x2");
		sb.Append("\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\b\x1B\x2\x2\xB3\x36\x3\x2\x2");
		sb.Append("\x2\xB4\xB5\a*\x2\x2\xB5\x38\x3\x2\x2\x2\xB6\xB7\a+\x2\x2\xB7");
		sb.Append(":\x3\x2\x2\x2\xB8\xB9\v\x2\x2\x2\xB9<\x3\x2\x2\x2\a\x2\x9E\xA0");
		sb.Append("\xA9\xAB\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace Riql.Transpiler.Rsql
